export {withSubscribedView} from 'react-subscription-view/esm'
import {subscribeToState} from 'react-subscription-view/esm'

export function withSubscribe(evtbus, Component) ::
  const C = class extends Component ::
    state = this.state || {}

    subscriptions(props) ::
    setSubscriptionState(sub_state, cleanup) ::
      if undefined !== cleanup ::
        Object.assign @ this.state, sub_state
        this.evt_sink.on @ 'cleanup', cleanup
      else ::
        this.setState(sub_state)

    componentWillMount() ::
      bindSubscriptions(this)

    componentWillUnmount() ::
      this.evt_sink.emit('cleanup').clear()

    get evt_sink() :: return evtbus.sink(this)

  C.prototype.evtbus = evtbus
  return C


export function bindSubscriptions(component) ::
  const subscriptions = 'function' === typeof component.subscriptions
    ? component.subscriptions(component.props)
    : component.subscriptions

  const sub = subscribeToState @ subscriptions,
  sub.setCurrent = current =>
    component.setSubscriptionState(current)

  component.setSubscriptionState @
    sub.initial, sub.unsubscribe

