Object.assign @ evtbus, evtbus()
export default function evtbus() ::
  const _byTopic = new Map()
  const _bySink = new WeakMap()

  return @{} topic, sink

  function topic(topic_) ::
    return @{}
      emit(name, evt) ::
        const ns = byTopic(topic_), l1 = ns[name], l2 = ns['*']
        if l1 ::
          for const fn of l1 ::
            fn(evt, topic_)
        if l2 ::
          for const fn of l2 ::
            fn(evt, name, topic_)

      clear(expunge) ::
        const ns = _byTopic.get(topic_)
        if ! ns :: return
        if expunge :: _byTopic.delete(topic_)
        clear_ns(ns)


  function byTopic(topic_, name) ::
    if null == topic_ ::
      throw new TypeError('Invalid topic')

    let ns = _byTopic.get(topic_)
    if undefined === ns ::
      const obj = _bySink.get(topic_)
      if undefined !== obj ::
        ns = obj.ns || @ obj.ns = create_ns()
      else ::
        _byTopic.set @ topic_, ns = create_ns()
    if name ::
      return ns[name] || @ ns[name] = []
    return ns

  function create_ns() :: return Object.create(null)
  function clear_ns(ns) ::
    for const [name, lst] of Object.entries(ns) ::
      delete ns[name]
      for const ea of lst ::
        ea.fn = ea.lst = null


  function sink(sink_) ::
    const self = Object.assign @ on_topic, @{} on_topic, clear, on, emit
    return self

    function clear() ::
      const funcs = _bySink.get(sink_)
      if funcs ::
        _bySink.delete(sink_)
        for const {lst, fn} of funcs ::
          // from https://github.com/developit/mitt/blob/e911aacbec17f3aea33d465637a11ff6738f50b2/src/index.js#L44
          if lst :: lst.splice @ lst.indexOf(fn) >>> 0, 1
        funcs.clear()
        if funcs.ns :: clear_ns(funcs.ns)
      return self

    function emit(name, evt) ::
      const funcs = _bySink.get(sink_)
      if funcs && funcs.ns ::
        topic(sink_).emit(name, evt)
      return self

    function on(name, fn) ::
      return on_topic(sink_, name, fn)

    function on_topic(topic, name, fn) ::
      if 'function' !== typeof fn ::
        throw new TypeError @ 'Expected function'

      let funcs = _bySink.get(sink_)
      if undefined === funcs ::
        funcs = new Set()
        _bySink.set(sink_, funcs)

      if topic ::
        const lst = byTopic(topic, name)
        funcs.add @: fn, lst
        lst.push @ fn
      return self

